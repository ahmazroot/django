Please provide a detailed explanation of the architecture for a multi-tenant SaaS customer service application built with Django, using a shared database and shared schema approach. The application allows users to create accounts, add their data, and interact with a chat API endpoint (/api/chat/call). Each tenant has a token limit for API usage, and there is no explicit user-level authentication. Tenant identification is based solely on the HTTP Host header (e.g., tenant1.myapp.com) provided in client requests. Focus on the architectural design and specifications without including any code, code snippets, or coding suggestions. Describe the following:





Overview of the Application:





Explain the purpose of the SaaS application for customer service.



Highlight the multi-tenant architecture using a shared database and shared schema.



Describe the key functionality: user account creation, data addition, chat API, and token limit tracking per tenant.



Tenant Identification Mechanism:





Explain how the HTTP Host header (e.g., tenant1.myapp.com) is used to identify the tenant for each request.



Describe how the system maps the domain to a tenant identifier without requiring user authentication.



Discuss how this approach simplifies client interaction and ensures data isolation.



Database Architecture:





Describe the shared database, shared schema structure.



Explain how data is isolated between tenants (e.g., using a tenant_id field in all relevant tables).



Specify the key tables involved (e.g., Tenant, ChatMessage, CustomerData) and their roles.



Detail how token limits and usage are tracked at the tenant level.



Request Processing for /api/chat/call:





Outline the flow of a request to the /api/chat/call endpoint.



Explain how the system identifies the tenant, validates token limits, processes the chat request, and stores data while ensuring tenant isolation.



Describe how responses are filtered to include only the relevant tenant's data.



Security Considerations:





Discuss how data isolation is enforced to prevent cross-tenant data leakage.



Explain the role of the domain validation process in ensuring security.



Highlight protections against abuse (e.g., rate limiting, token limit enforcement).



Scalability and Performance:





Describe how the architecture supports scalability for multiple tenants (e.g., 1-1000 tenants).



Explain strategies for optimizing performance, such as caching tenant-to-domain mappings.



Discuss handling concurrent requests from multiple users within the same tenant.



Infrastructure Requirements:





Outline the role of DNS configuration for wildcard subdomains (e.g., *.myapp.com).



Describe the server setup (e.g., reverse proxy, application server) to route requests based on the Host header.



Mention considerations for load balancing and high availability.



Advantages and Trade-offs:





Highlight the benefits of using the Host header for tenant identification (e.g., simplicity, minimal client changes).



Discuss potential limitations (e.g., reliance on DNS, lack of user-level authentication) and how they are mitigated.

Ensure the explanation is clear, concise, and focused on the architectural design, avoiding any technical implementation details like code, libraries, or specific Django configurations. Provide a high-level, conceptual overview suitable for understanding the system's structure and functionality.